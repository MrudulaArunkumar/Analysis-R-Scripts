pander(summary(Exp1data_OL$RT_ifo), style = 'rmarkdown', caption = "Summary of RT after removing Farouts")
pander(summary(Exp1data_OL$RT_io), style = 'rmarkdown', caption = "Summary of RT after removing Outliers")
#alternatively, moving relevant columns to the first position(s) for even easier reference ;)
Exp1data_OL <- Exp1data_OL%>%select(Condition, Distractor1, Distractor2, everything())
#For TEST Trials
#Giving a default value of far for the Distance column
Exp1data_OL$Distance <- NA
Exp1data_OL <- Exp1data_OL %>%
mutate(Distance = ifelse(lag(Condition,1)=="test" &
(lag(Distractor1,1)==Distractor1|lag(Distractor1,1)==Distractor2) &
lag(participant,1)==participant &
lag(ACC_Trials,1)== 1, 1, Distance))
#For LEARN trials
Exp1data_OL <- Exp1data_OL %>%
mutate(Distance = ifelse(lag(Condition,1)=="learn" &                           (lag(Distractor1,1)==Distractor1|lag(Distractor1,1)==Distractor2|lag(Distractor2,1)==Distractor1) & lag(participant,1)==participant &  lag(ACC_Trials,1)== 1, 1, Distance))
#The number of immediate previous occurences
pander(table(Exp1data_OL$Distance), style = 'rmarkdown', caption = "Table showing the number of immediate previous occurence")
lagvalue <- 2:30
#For learn trials and test trials together
for(j in lagvalue){
Exp1data_OL <- Exp1data_OL %>%
mutate(Distance = ifelse((lag(Condition,j)=="learn"|lag(Condition,j)=="test") &                     (lag(Distractor1,j)==Distractor1|lag(Distractor1,j)==Distractor2|lag(Distractor2,j)==Distractor1) & lag(participant,j)==participant & lag(ACC_Trials,j)== 1 & is.na(Distance)==TRUE, j, Distance))
}
pander(table(Exp1data_OL$Distance), style = 'rmarkdown', caption = "Table showing the number of total previous occurences and how far each of them are")
Exp1data_OL <- Exp1data_OL %>%
select(Distance,everything())
sum(is.na(Exp1data_OL$Distance))
Exp1data_OL$ResponseType <- NA
#moving this column to the last for easy reference
Exp1data_OL <- Exp1data_OL%>%select(CorrectAnswer,everything())
#coding repeating the same response and if the conditions are not true the RC is evaluated under the else clause within the main ifelse statement. This was done to avoid revaluating and missing out values that are originally RC but was treated as RR as that was evaluated first.
Rmlag <- 1:30
for(k in Rmlag){
Exp1data_OL <- Exp1data_OL %>%
mutate(ResponseType = ifelse((lag(Condition,k)=="learn" | lag(Condition,k)=="test") &          (lag(Distractor1,k)==Distractor1|lag(Distractor1,k)==Distractor2|lag(Distractor2,k)==Distractor1) & lag(participant,k)==participant & lag(CorrectAnswer,k)== CorrectAnswer & is.na(ResponseType)==TRUE, "RR", ifelse((lag(Condition,k)=="learn"|lag(Condition,k)=="test") & (lag(Distractor1,k)==Distractor1|lag(Distractor1,k)==Distractor2|lag(Distractor2,k)==Distractor1)& lag(participant,k)==participant & lag(CorrectAnswer,k)!= CorrectAnswer & is.na(ResponseType)==TRUE, "RC", ResponseType)))
}
pander(table(Exp1data_OL$ResponseType),style = 'rmarkdown', caption = "Total number of RRs and RCs")
#crosstable to check factorial combination of Distance x Response Type:
pander(table(Exp1data_OL$Distance, Exp1data_OL$ResponseType), style = 'rmarkdown', caption = 'Factorial combination of Distance x Response Type')
#crosstable to check factorial combination of Distance x Response Type x COndition:
pander(table(Exp1data_OL$Distance, Exp1data_OL$ResponseType, Exp1data_OL$Condition), caption = "Factorial combination of Distance x ResponseType x Condition")
Exp1data_OL <- Exp1data_OL%>%
select(ResponseType, everything())
sum(is.na(Exp1data_OL$ResponseType))
#creating new column
Exp1data_OL$LastOcc_Condition <- NA
Exp1data_OL <- Exp1data_OL %>%
mutate(LastOcc_Condition = ifelse(lag(Condition,1)=="test" &
(lag(Distractor1,1)==Distractor1|lag(Distractor1,1)==Distractor2) &
lag(participant,1)==participant &
lag(ACC_Trials,1)== 1, "test", LastOcc_Condition))
Exp1data_OL <- Exp1data_OL %>%
mutate(LastOcc_Condition = ifelse(lag(Condition,1)=="learn" &
(lag(Distractor1,1)==Distractor1|lag(Distractor1,1)==Distractor2) &
lag(participant,1)==participant &
lag(ACC_Trials,1)== 1, "learn", LastOcc_Condition))
#Checking the condition for each lag
for(l in lagvalue){
Exp1data_OL <- Exp1data_OL %>%
mutate(LastOcc_Condition = ifelse((lag(Condition,l)=="learn") &          (lag(Distractor1,l)==Distractor1|lag(Distractor1,l)==Distractor2|lag(Distractor2,l)==Distractor1) & lag(participant,l)==participant & lag(ACC_Trials,l)==1 & is.na(LastOcc_Condition)==TRUE, "learn", ifelse((lag(Condition,l)=="test") & (lag(Distractor1,l)==Distractor1|lag(Distractor1,l)==Distractor2|lag(Distractor2,l)==Distractor1)& lag(participant,l)==participant & lag(ACC_Trials,l)== 1 & is.na(LastOcc_Condition)==TRUE, "test", LastOcc_Condition)))
}
pander(table(Exp1data_OL$LastOcc_Condition), style = "rmarkdown", caption = "Number of trials where the last occurence's condition was learn/test")
Exp1data_OL <- Exp1data_OL %>%
select(LastOcc_Condition,everything())
Exp1data_OL <- Exp1data_OL[!grepl("learn", Exp1data_OL$Condition),]
#farouts
Exp1agg_fo <- aggregate(data = Exp1data_OL, RT_ifo~participant+Saliency+Validity+ResponseType+Distance, mean)
#Converting to factors for ANOVA
Exp1agg_fo$participant <- as.factor(Exp1agg_fo$participant)
Exp1agg_fo$Saliency <- as.factor(Exp1agg_fo$Saliency)
Exp1agg_fo$Validity <- as.factor(Exp1agg_fo$Validity)
Exp1agg_fo$ResponseType <- as.factor(Exp1agg_fo$ResponseType)
Exp1agg_fo$Distance <- as.factor(Exp1agg_fo$Distance)
Exp1agg_fo <- Exp1agg_fo %>%
dplyr::rename("Val" = "Validity",
"Sal" = "Saliency",
"RespType" = "ResponseType",
"Dist" = "Distance")
###outliers
Exp1agg_o <- aggregate(data = Exp1data_OL, RT_io~participant+Saliency+Validity+ResponseType+Distance, mean)
#Converting to factors for ANOVA
Exp1agg_o$participant <- as.factor(Exp1agg_o$participant)
Exp1agg_o$Saliency <- as.factor(Exp1agg_o$Saliency)
Exp1agg_o$Validity <- as.factor(Exp1agg_o$Validity)
Exp1agg_o$ResponseType <- as.factor(Exp1agg_o$ResponseType)
Exp1agg_o$Distance <- as.factor(Exp1agg_o$Distance)
#renaming columns for shorter factor names in anova
Exp1agg_o <- Exp1agg_o %>%
dplyr::rename("Val" = "Validity",
"Sal" = "Saliency",
"RespType" = "ResponseType",
"Dist" = "Distance")
#farouts
Exp1agg_Resp_fo <- aggregate(data = Exp1data_OL, RT_ifo~participant+Saliency+Validity+ResponseType, mean)
#Converting to factors for ANOVA
Exp1agg_Resp_fo$participant <- as.factor(Exp1agg_Resp_fo$participant)
Exp1agg_Resp_fo$Saliency <- as.factor(Exp1agg_Resp_fo$Saliency)
Exp1agg_Resp_fo$Validity <- as.factor(Exp1agg_Resp_fo$Validity)
Exp1agg_Resp_fo$ResponseType <- as.factor(Exp1agg_Resp_fo$ResponseType)
Exp1agg_Resp_fo <- Exp1agg_Resp_fo %>%
dplyr::rename("Val" = "Validity",
"Sal" = "Saliency",
"RespType" = "ResponseType",
)
###outliers
Exp1agg_Resp_o <- aggregate(data = Exp1data_OL, RT_io~participant+Saliency+Validity+ResponseType, mean)
#Converting to factors for ANOVA
Exp1agg_Resp_o$participant <- as.factor(Exp1agg_Resp_o$participant)
Exp1agg_Resp_o$Saliency <- as.factor(Exp1agg_Resp_o$Saliency)
Exp1agg_Resp_o$Validity <- as.factor(Exp1agg_Resp_o$Validity)
Exp1agg_Resp_o$ResponseType <- as.factor(Exp1agg_Resp_o$ResponseType)
Exp1agg_Resp_o <- Exp1agg_Resp_o %>%
dplyr::rename("Val" = "Validity",
"Sal" = "Saliency",
"RespType" = "ResponseType",
)
#farouts
Exp1agg_RespLC_fo <- aggregate(data = Exp1data_OL, RT_ifo~participant+Saliency+Validity+ResponseType+LastOcc_Condition, mean)
#Converting to factors for ANOVA
Exp1agg_RespLC_fo$participant <- as.factor(Exp1agg_RespLC_fo$participant)
Exp1agg_RespLC_fo$Saliency <- as.factor(Exp1agg_RespLC_fo$Saliency)
Exp1agg_RespLC_fo$Validity <- as.factor(Exp1agg_RespLC_fo$Validity)
Exp1agg_RespLC_fo$ResponseType <- as.factor(Exp1agg_RespLC_fo$ResponseType)
Exp1agg_RespLC_fo <- Exp1agg_RespLC_fo %>%
dplyr::rename("Val" = "Validity",
"Sal" = "Saliency",
"RespType" = "ResponseType",
"LastOccCond" = "LastOcc_Condition"
)
###outliers
Exp1agg_RespLC_o <- aggregate(data = Exp1data_OL, RT_io~participant+Saliency+Validity+ResponseType+LastOcc_Condition, mean)
#Converting to factors for ANOVA
Exp1agg_RespLC_o$participant <- as.factor(Exp1agg_RespLC_o$participant)
Exp1agg_RespLC_o$Saliency <- as.factor(Exp1agg_RespLC_o$Saliency)
Exp1agg_RespLC_o$Validity <- as.factor(Exp1agg_RespLC_o$Validity)
Exp1agg_RespLC_o$ResponseType <- as.factor(Exp1agg_RespLC_o$ResponseType)
Exp1agg_RespLC_o <- Exp1agg_RespLC_o %>%
dplyr::rename("Val" = "Validity",
"Sal" = "Saliency",
"RespType" = "ResponseType",
"LastOccCond" = "LastOcc_Condition"
)
#farouts
Exp1agg_RespDistLC_fo <- aggregate(data = Exp1data_OL, RT_ifo~participant+Saliency+Validity+ResponseType+LastOcc_Condition+Distance, mean)
#Converting to factors for ANOVA
Exp1agg_RespDistLC_fo$participant <- as.factor(Exp1agg_RespDistLC_fo$participant)
Exp1agg_RespDistLC_fo$Saliency <- as.factor(Exp1agg_RespDistLC_fo$Saliency)
Exp1agg_RespDistLC_fo$Validity <- as.factor(Exp1agg_RespDistLC_fo$Validity)
Exp1agg_RespDistLC_fo$ResponseType <- as.factor(Exp1agg_RespDistLC_fo$ResponseType)
Exp1agg_RespDistLC_fo <- Exp1agg_RespDistLC_fo %>%
dplyr::rename("Val" = "Validity",
"Sal" = "Saliency",
"RespType" = "ResponseType",
"LastOccCond" = "LastOcc_Condition",
"Dist" = "Distance"
)
###outliers
Exp1agg_RespDistLC_o <- aggregate(data = Exp1data_OL, RT_io~participant+Saliency+Validity+ResponseType+LastOcc_Condition+Distance, mean)
#Converting to factors for ANOVA
Exp1agg_RespDistLC_o$participant <- as.factor(Exp1agg_RespDistLC_o$participant)
Exp1agg_RespDistLC_o$Saliency <- as.factor(Exp1agg_RespDistLC_o$Saliency)
Exp1agg_RespDistLC_o$Validity <- as.factor(Exp1agg_RespDistLC_o$Validity)
Exp1agg_RespDistLC_o$ResponseType <- as.factor(Exp1agg_RespDistLC_o$ResponseType)
Exp1agg_RespDistLC_o <- Exp1agg_RespDistLC_o %>%
dplyr::rename("Val" = "Validity",
"Sal" = "Saliency",
"RespType" = "ResponseType",
"LastOccCond" = "LastOcc_Condition",
"Dist" = "Distance"
)
anova_Resp <- aov(data=Exp1agg_Resp_fo, RT_ifo~(RespType*Sal*Val)+Error(participant/(Val*Sal*RespType)))
pander(summary(anova_Resp),style="rmarkdown",caption = "ANOVA Results of RT(Farouts) x Validity, Saliency and responseType")
aggRespSV <- ddply(Exp1agg_Resp_fo, .(Val,Sal,RespType), summarize, RTmean=mean(RT_ifo))
ggplot(aggRespSV, aes(RespType,RTmean,color = Val)) +
geom_line(aes(group=Val))+
geom_point()+
labs(x="Response Type", y = "ReactionTime", color = "Validity")+
ylim(520,620)+
facet_grid(.~Sal)+
theme_classic()
anova_Resp_o <- aov(RT_io~(RespType*Sal*Val)+Error(participant/(RespType*Sal*Val)), data=Exp1agg_Resp_o)
pander(summary(anova_Resp_o),style="rmarkdown",caption = "ANOVA Results of RT(Outliers) x Validity, Saliency and responseType")
aggRespSV_o<- ddply(Exp1agg_o, .(Val,Sal,RespType), summarize, RTmean = mean(RT_io))
ggplot(aggRespSV_o, aes(RespType,RTmean,color = Val)) +
geom_line(aes(group=Val))+
geom_point()+
labs(x="Response Type", y = "ReactionTime")+
ylim(520,620)+
facet_grid(.~Sal)+
theme_classic()
anova_DistResp <- aov(RT_ifo~(ResponseType*Saliency*Validity*Distance) + Error(participant|(ResponseType*Saliency*Validity*Distance)),data=Exp1agg_fo)
anova_DistResp <- aov(RT_ifo~(RespType*Sal*Val*Dist) + Error(participant|(RespType*Sal*Val*Dist)),data=Exp1agg_fo)
anova_DistResp <- aov(RT_ifo~(RespType*Sal*Val*Dist) + Error(participant|(RespType*Sal*Val*Dist)),data=Exp1agg_fo)
anova_DistResp <- aov(RT_ifo~(RespType*Sal*Val*Dist)+Error(participant|(RespType*Sal*Val*Dist)),data=Exp1agg_fo)
anova_DistResp_o <- aov(RT_io~(Val*Sal*RespType*Dist)+Error(participant|(RespType*Sal*Val*Dist)),
data=Exp1agg_o)
#Recording the session of R in place at the time
sessionInfo()
#loading the necessary libraries
library(tidyverse) #for data prep
library(plyr)#also for data prep
library(ez) #anova stats
library(schoRsch)
library(nlme) #repeated measures anova
library(data.table)#for lag
library(knitr)#for markdown
library(pander)#for markdown tables
library(here) #useful to set up working directory
library(rmarkdown) #for markdown
#clearing up workspace
rm(list=ls())
#setting up working directory at home office
#setwd("C:/FSU Jena_PhD/Exp1/Analysis")
#loading the combined datafile home office
#Exp1data_OL <- read.csv("C:/FSU Jena_PhD/Exp1/Data/Exp1-Prolific/Exp1data_online_fullset.csv")
#Office set up Mrudula
#setwd("D:/PhD/Exp1-Overshadowing/Analysis/R Scripts")
set_here()
#Office setup Carina
#setwd("~/Daten/1 BRAC-FOR/overshadowing/Exp 1 Psychopy Mrudula/Analyses")
#load from homeoffice
Exp1data_OL <- read.csv("C:/FSU Jena_PhD/Exp1/Data/Exp1-Prolific/Exp1data_online_fullset.csv")
#load from office
#Exp1data_OL <- read.csv("D:/PhD/Exp1-Overshadowing/Data/Exp1data_online_fullset.csv")
#adding the dataframe to the search path to not repeat it everytime to select or name a column
attach(Exp1data_OL)
#remember to deattach() when you are done with it
#removing unnecessary columns
Exp1data_OL <- Exp1data_OL %>%
select(-Attention.thisRepN,-Attention.thisTrialN,-Attention.thisIndex,-Attention.ran,
-id, -session, -researcher, -InstRep.thisRepN,-InstRep.thisIndex,-InstRep.thisN, -InstRep.thisTrialN,
-PracRepeat.thisRepN,-PracRepeat.thisIndex,-PracRepeat.thisN, -PracRepeat.thisTrialN,
-prctrials.thisIndex,-prctrials.thisRepN,-prctrials.thisTrialN,-prctrials.ran,
-firstlearntrials.thisN,-firstlearntrials.thisRepN,-firstlearntrials.thisTrialN,-firstlearntrials.ran,-firstlearntrials.thisIndex,-blocks.ran,-blocks.thisIndex,-blocks.thisN,-blocks.thisTrialN,
-afterpause.keys,-InstRep.ran,-consentkey.keys,-consentkey.rt,-beginexp.keys,-beginexp.rt,-checkresp.corr,-checkresp.keys,-checkresp.rt,-Attention.thisN,-Question,-Solution,-gotoPrac.keys,-gotoPrac.rt,-PracRepeat.ran,-prctrials.thisN,-afterpause.rt,-blocks.thisN, -todebrief.rt, -todebrief.keys, -ExpExit.keys, -ExpExit.rt
)
#removing the first column named x
Exp1data_OL <- subset(Exp1data_OL, select = -c(X))
#get RT variable to start of dataset
Exp1data_OL <-Exp1data_OL %>%
select(ResponseKey.rt, PreTargetDisplayTime, Block, everything())
#Splitting up the RT column to be able to evaluate the RTs
Exp1data_OL <- separate(Exp1data_OL, col = ResponseKey.rt, into = c("RT_Trials", "RT_secondary"), sep = ",")
#removing the square bracket and changing from string to numeric
Exp1data_OL$RT_Trials <- Exp1data_OL$RT_Trials %>%
str_replace_all("\\[|\\]", "")%>%
as.double(Exp1data_OL$RT_Trials)
#converting RT and PreTarget DIsplay time values in ms
Exp1data_OL$RT_Trials <- 1000*(Exp1data_OL$RT_Trials)
Exp1data_OL$PreTargetDisplayTime <- 1000 * Exp1data_OL$PreTargetDisplayTime
#renaming it to OldRT to have a copy and later transform the RT values based on the time calculated in psychopy
names(Exp1data_OL)[names(Exp1data_OL)=="RT_Trials"] <- "Old_RT"
Exp1data_OL$RT_Trials <- Exp1data_OL$Old_RT
#to check frequency of each value in the column
table(Exp1data_OL$PreTargetDisplayTime)
#adjusting RT
Exp1data_OL$RT_Trials <- 400+Exp1data_OL$RT_Trials #adding the 400ms that was coded in psychopy after which RT is evaluated
#Removing the preinterval display duration that also includes fixation duration
Exp1data_OL$RT_Trials <- Exp1data_OL$RT_Trials - Exp1data_OL$PreTargetDisplayTime
#making sure screenbg is entered in every cell
Exp1data_OL <- Exp1data_OL%>%group_by(participant)%>%fill(Screen_bg,.direction = "down")
Exp1data_OL <- Exp1data_OL %>% group_by(participant)%>%fill(blocks.thisRepN,.direction = "up")
names(Exp1data_OL)[names(Exp1data_OL)=="blocks.thisRepN"] <- "BlockCount"
Exp1data_OL$ACC_Trials <- Exp1data_OL$ResponseKey.corr
#new columns for error rate
Exp1data_OL$ErrorRate <- 1 - Exp1data_OL$ACC_Trials
#removing practice and learn trials
Exp1data_OL <- Exp1data_OL[!grepl("Practice", Exp1data_OL$Block),]
#removing other columsn related to practice
Exp1data_OL <- Exp1data_OL %>%
select(-pracend.keys, -pracend.rt, -Prac_start.rt, -Prac_start.keys, -ResponseKey_p.corr,-ResponseKey_p.keys, -ResponseKey_p.rt)
#get newly created vars to start of dataset
Exp1data_OL <-Exp1data_OL %>%
select(RT_Trials, ACC_Trials, ErrorRate, everything())
#removing the rows that contain NA like the block end/pause screens of the exp
Exp1data_OL<- Exp1data_OL%>%drop_na(RT_Trials)
detach(Exp1data_OL)
#Saving this cleaned and prepared data frame
#write.csv(Exp1data_OL, file = "Exp1data_Online_cleaned.csv")
attach(Exp1data_OL)
#Age
pander(summary(Age), style = 'rmarkdown', caption = "Descriptive Statistics of Sample Age")
pander((table(Age)/240), style = "rmarkdown", caption = "Number of participants per Age")
#Gender
pander((table(Gender)/240), style = "rmarkdown", caption = "Gender count")
#Mean RT
pander(summary(Exp1data_OL$RT_Trials), style = 'rmarkdown', caption = "Summary of RT")
#Accuracy
pander(table(Exp1data_OL$ACC_Trials), style = 'rmarkdown', caption = "Number of correct and Incorrect trials")
#Accuracy in percentage
pander(round(table(Exp1data_OL$ACC_Trials)/nrow(Exp1data_OL)*100, digits = 3), style = 'rmarkdown', caption = "Percentage of errors")
#removing RT values for the incorrect trials
Exp1data_OL$RT_Trials[Exp1data_OL$ACC_Trials==0] <- NA
#creating function to remove the outliers and farouts
computeTukeys <- function(x){
P25 <- quantile(x$RT_Trials, .25, na.rm = TRUE, type = 6) #type = 6 -> used in SPSS
P75 <- quantile(x$RT_Trials, .75, na.rm = TRUE, type = 6)
x$Outlier <- P75 + 1.5*(P75 - P25)
x$Farouts <- P75 + 3.0*(P75 - P25)
return(x)
}
#identifying the outliers and farouts at individual level
Exp1data_OL <- ddply(Exp1data_OL, .(participant), computeTukeys)
#creating new column with RT trials after removing outliers/farouts
Exp1data_OL$RT_ifo <- Exp1data_OL$RT_Trials
Exp1data_OL$RT_io <- Exp1data_OL$RT_Trials
Exp1data_OL$RT_ifo[Exp1data_OL$RT_ifo > Exp1data_OL$Farouts|Exp1data_OL$RT_ifo < 300] <- NA
Exp1data_OL$RT_io[Exp1data_OL$RT_io > Exp1data_OL$Outlier|Exp1data_OL$RT_io < 300] <- NA
pander(summary(Exp1data_OL$RT_ifo), style = 'rmarkdown', caption = "Summary of RT after removing Farouts")
pander(summary(Exp1data_OL$RT_io), style = 'rmarkdown', caption = "Summary of RT after removing Outliers")
#alternatively, moving relevant columns to the first position(s) for even easier reference ;)
Exp1data_OL <- Exp1data_OL%>%select(Condition, Distractor1, Distractor2, everything())
#For TEST Trials
#Giving a default value of far for the Distance column
Exp1data_OL$Distance <- NA
Exp1data_OL <- Exp1data_OL %>%
mutate(Distance = ifelse(lag(Condition,1)=="test" &
(lag(Distractor1,1)==Distractor1|lag(Distractor1,1)==Distractor2) &
lag(participant,1)==participant &
lag(ACC_Trials,1)== 1, 1, Distance))
#For LEARN trials
Exp1data_OL <- Exp1data_OL %>%
mutate(Distance = ifelse(lag(Condition,1)=="learn" &                           (lag(Distractor1,1)==Distractor1|lag(Distractor1,1)==Distractor2|lag(Distractor2,1)==Distractor1) & lag(participant,1)==participant &  lag(ACC_Trials,1)== 1, 1, Distance))
#The number of immediate previous occurences
pander(table(Exp1data_OL$Distance), style = 'rmarkdown', caption = "Table showing the number of immediate previous occurence")
lagvalue <- 2:30
#For learn trials and test trials together
for(j in lagvalue){
Exp1data_OL <- Exp1data_OL %>%
mutate(Distance = ifelse((lag(Condition,j)=="learn"|lag(Condition,j)=="test") &                     (lag(Distractor1,j)==Distractor1|lag(Distractor1,j)==Distractor2|lag(Distractor2,j)==Distractor1) & lag(participant,j)==participant & lag(ACC_Trials,j)== 1 & is.na(Distance)==TRUE, j, Distance))
}
pander(table(Exp1data_OL$Distance), style = 'rmarkdown', caption = "Table showing the number of total previous occurences and how far each of them are")
Exp1data_OL <- Exp1data_OL %>%
select(Distance,everything())
sum(is.na(Exp1data_OL$Distance))
Exp1data_OL$ResponseType <- NA
#moving this column to the last for easy reference
Exp1data_OL <- Exp1data_OL%>%select(CorrectAnswer,everything())
#coding repeating the same response and if the conditions are not true the RC is evaluated under the else clause within the main ifelse statement. This was done to avoid revaluating and missing out values that are originally RC but was treated as RR as that was evaluated first.
Rmlag <- 1:30
for(k in Rmlag){
Exp1data_OL <- Exp1data_OL %>%
mutate(ResponseType = ifelse((lag(Condition,k)=="learn" | lag(Condition,k)=="test") &          (lag(Distractor1,k)==Distractor1|lag(Distractor1,k)==Distractor2|lag(Distractor2,k)==Distractor1) & lag(participant,k)==participant & lag(CorrectAnswer,k)== CorrectAnswer & is.na(ResponseType)==TRUE, "RR", ifelse((lag(Condition,k)=="learn"|lag(Condition,k)=="test") & (lag(Distractor1,k)==Distractor1|lag(Distractor1,k)==Distractor2|lag(Distractor2,k)==Distractor1)& lag(participant,k)==participant & lag(CorrectAnswer,k)!= CorrectAnswer & is.na(ResponseType)==TRUE, "RC", ResponseType)))
}
pander(table(Exp1data_OL$ResponseType),style = 'rmarkdown', caption = "Total number of RRs and RCs")
#crosstable to check factorial combination of Distance x Response Type:
pander(table(Exp1data_OL$Distance, Exp1data_OL$ResponseType), style = 'rmarkdown', caption = 'Factorial combination of Distance x Response Type')
#crosstable to check factorial combination of Distance x Response Type x COndition:
pander(table(Exp1data_OL$Distance, Exp1data_OL$ResponseType, Exp1data_OL$Condition), caption = "Factorial combination of Distance x ResponseType x Condition")
Exp1data_OL <- Exp1data_OL%>%
select(ResponseType, everything())
sum(is.na(Exp1data_OL$ResponseType))
#creating new column
Exp1data_OL$LastOcc_Condition <- NA
Exp1data_OL <- Exp1data_OL %>%
mutate(LastOcc_Condition = ifelse(lag(Condition,1)=="test" &
(lag(Distractor1,1)==Distractor1|lag(Distractor1,1)==Distractor2) &
lag(participant,1)==participant &
lag(ACC_Trials,1)== 1, "test", LastOcc_Condition))
Exp1data_OL <- Exp1data_OL %>%
mutate(LastOcc_Condition = ifelse(lag(Condition,1)=="learn" &
(lag(Distractor1,1)==Distractor1|lag(Distractor1,1)==Distractor2) &
lag(participant,1)==participant &
lag(ACC_Trials,1)== 1, "learn", LastOcc_Condition))
#Checking the condition for each lag
for(l in lagvalue){
Exp1data_OL <- Exp1data_OL %>%
mutate(LastOcc_Condition = ifelse((lag(Condition,l)=="learn") &          (lag(Distractor1,l)==Distractor1|lag(Distractor1,l)==Distractor2|lag(Distractor2,l)==Distractor1) & lag(participant,l)==participant & lag(ACC_Trials,l)==1 & is.na(LastOcc_Condition)==TRUE, "learn", ifelse((lag(Condition,l)=="test") & (lag(Distractor1,l)==Distractor1|lag(Distractor1,l)==Distractor2|lag(Distractor2,l)==Distractor1)& lag(participant,l)==participant & lag(ACC_Trials,l)== 1 & is.na(LastOcc_Condition)==TRUE, "test", LastOcc_Condition)))
}
pander(table(Exp1data_OL$LastOcc_Condition), style = "rmarkdown", caption = "Number of trials where the last occurence's condition was learn/test")
Exp1data_OL <- Exp1data_OL %>%
select(LastOcc_Condition,everything())
Exp1data_OL <- Exp1data_OL[!grepl("learn", Exp1data_OL$Condition),]
#farouts
Exp1agg_fo <- aggregate(data = Exp1data_OL, RT_ifo~participant+Saliency+Validity+ResponseType+Distance, mean)
#Converting to factors for ANOVA
Exp1agg_fo$participant <- as.factor(Exp1agg_fo$participant)
Exp1agg_fo$Saliency <- as.factor(Exp1agg_fo$Saliency)
Exp1agg_fo$Validity <- as.factor(Exp1agg_fo$Validity)
Exp1agg_fo$ResponseType <- as.factor(Exp1agg_fo$ResponseType)
Exp1agg_fo$Distance <- as.factor(Exp1agg_fo$Distance)
Exp1agg_fo <- Exp1agg_fo %>%
dplyr::rename("Val" = "Validity",
"Sal" = "Saliency",
"RespType" = "ResponseType",
"Dist" = "Distance")
###outliers
Exp1agg_o <- aggregate(data = Exp1data_OL, RT_io~participant+Saliency+Validity+ResponseType+Distance, mean)
#Converting to factors for ANOVA
Exp1agg_o$participant <- as.factor(Exp1agg_o$participant)
Exp1agg_o$Saliency <- as.factor(Exp1agg_o$Saliency)
Exp1agg_o$Validity <- as.factor(Exp1agg_o$Validity)
Exp1agg_o$ResponseType <- as.factor(Exp1agg_o$ResponseType)
Exp1agg_o$Distance <- as.factor(Exp1agg_o$Distance)
#renaming columns for shorter factor names in anova
Exp1agg_o <- Exp1agg_o %>%
dplyr::rename("Val" = "Validity",
"Sal" = "Saliency",
"RespType" = "ResponseType",
"Dist" = "Distance")
#farouts
Exp1agg_Resp_fo <- aggregate(data = Exp1data_OL, RT_ifo~participant+Saliency+Validity+ResponseType, mean)
#Converting to factors for ANOVA
Exp1agg_Resp_fo$participant <- as.factor(Exp1agg_Resp_fo$participant)
Exp1agg_Resp_fo$Saliency <- as.factor(Exp1agg_Resp_fo$Saliency)
Exp1agg_Resp_fo$Validity <- as.factor(Exp1agg_Resp_fo$Validity)
Exp1agg_Resp_fo$ResponseType <- as.factor(Exp1agg_Resp_fo$ResponseType)
Exp1agg_Resp_fo <- Exp1agg_Resp_fo %>%
dplyr::rename("Val" = "Validity",
"Sal" = "Saliency",
"RespType" = "ResponseType",
)
###outliers
Exp1agg_Resp_o <- aggregate(data = Exp1data_OL, RT_io~participant+Saliency+Validity+ResponseType, mean)
#Converting to factors for ANOVA
Exp1agg_Resp_o$participant <- as.factor(Exp1agg_Resp_o$participant)
Exp1agg_Resp_o$Saliency <- as.factor(Exp1agg_Resp_o$Saliency)
Exp1agg_Resp_o$Validity <- as.factor(Exp1agg_Resp_o$Validity)
Exp1agg_Resp_o$ResponseType <- as.factor(Exp1agg_Resp_o$ResponseType)
Exp1agg_Resp_o <- Exp1agg_Resp_o %>%
dplyr::rename("Val" = "Validity",
"Sal" = "Saliency",
"RespType" = "ResponseType",
)
#farouts
Exp1agg_RespLC_fo <- aggregate(data = Exp1data_OL, RT_ifo~participant+Saliency+Validity+ResponseType+LastOcc_Condition, mean)
#Converting to factors for ANOVA
Exp1agg_RespLC_fo$participant <- as.factor(Exp1agg_RespLC_fo$participant)
Exp1agg_RespLC_fo$Saliency <- as.factor(Exp1agg_RespLC_fo$Saliency)
Exp1agg_RespLC_fo$Validity <- as.factor(Exp1agg_RespLC_fo$Validity)
Exp1agg_RespLC_fo$ResponseType <- as.factor(Exp1agg_RespLC_fo$ResponseType)
Exp1agg_RespLC_fo <- Exp1agg_RespLC_fo %>%
dplyr::rename("Val" = "Validity",
"Sal" = "Saliency",
"RespType" = "ResponseType",
"LastOccCond" = "LastOcc_Condition"
)
###outliers
Exp1agg_RespLC_o <- aggregate(data = Exp1data_OL, RT_io~participant+Saliency+Validity+ResponseType+LastOcc_Condition, mean)
#Converting to factors for ANOVA
Exp1agg_RespLC_o$participant <- as.factor(Exp1agg_RespLC_o$participant)
Exp1agg_RespLC_o$Saliency <- as.factor(Exp1agg_RespLC_o$Saliency)
Exp1agg_RespLC_o$Validity <- as.factor(Exp1agg_RespLC_o$Validity)
Exp1agg_RespLC_o$ResponseType <- as.factor(Exp1agg_RespLC_o$ResponseType)
Exp1agg_RespLC_o <- Exp1agg_RespLC_o %>%
dplyr::rename("Val" = "Validity",
"Sal" = "Saliency",
"RespType" = "ResponseType",
"LastOccCond" = "LastOcc_Condition"
)
#farouts
Exp1agg_RespDistLC_fo <- aggregate(data = Exp1data_OL, RT_ifo~participant+Saliency+Validity+ResponseType+LastOcc_Condition+Distance, mean)
#Converting to factors for ANOVA
Exp1agg_RespDistLC_fo$participant <- as.factor(Exp1agg_RespDistLC_fo$participant)
Exp1agg_RespDistLC_fo$Saliency <- as.factor(Exp1agg_RespDistLC_fo$Saliency)
Exp1agg_RespDistLC_fo$Validity <- as.factor(Exp1agg_RespDistLC_fo$Validity)
Exp1agg_RespDistLC_fo$ResponseType <- as.factor(Exp1agg_RespDistLC_fo$ResponseType)
Exp1agg_RespDistLC_fo <- Exp1agg_RespDistLC_fo %>%
dplyr::rename("Val" = "Validity",
"Sal" = "Saliency",
"RespType" = "ResponseType",
"LastOccCond" = "LastOcc_Condition",
"Dist" = "Distance"
)
###outliers
Exp1agg_RespDistLC_o <- aggregate(data = Exp1data_OL, RT_io~participant+Saliency+Validity+ResponseType+LastOcc_Condition+Distance, mean)
#Converting to factors for ANOVA
Exp1agg_RespDistLC_o$participant <- as.factor(Exp1agg_RespDistLC_o$participant)
Exp1agg_RespDistLC_o$Saliency <- as.factor(Exp1agg_RespDistLC_o$Saliency)
Exp1agg_RespDistLC_o$Validity <- as.factor(Exp1agg_RespDistLC_o$Validity)
Exp1agg_RespDistLC_o$ResponseType <- as.factor(Exp1agg_RespDistLC_o$ResponseType)
Exp1agg_RespDistLC_o <- Exp1agg_RespDistLC_o %>%
dplyr::rename("Val" = "Validity",
"Sal" = "Saliency",
"RespType" = "ResponseType",
"LastOccCond" = "LastOcc_Condition",
"Dist" = "Distance"
)
anova_Resp <- aov(data=Exp1agg_Resp_fo, RT_ifo~(RespType*Sal*Val)+Error(participant/(Val*Sal*RespType)))
pander(summary(anova_Resp),style="rmarkdown",caption = "ANOVA Results of RT(Farouts) x Validity, Saliency and responseType")
aggRespSV <- ddply(Exp1agg_Resp_fo, .(Val,Sal,RespType), summarize, RTmean=mean(RT_ifo))
ggplot(aggRespSV, aes(RespType,RTmean,color = Val)) +
geom_line(aes(group=Val))+
geom_point()+
labs(x="Response Type", y = "ReactionTime", color = "Validity")+
ylim(520,620)+
facet_grid(.~Sal)+
theme_classic()
anova_Resp_o <- aov(RT_io~(RespType*Sal*Val)+Error(participant/(RespType*Sal*Val)), data=Exp1agg_Resp_o)
pander(summary(anova_Resp_o),style="rmarkdown",caption = "ANOVA Results of RT(Outliers) x Validity, Saliency and responseType")
aggRespSV_o<- ddply(Exp1agg_o, .(Val,Sal,RespType), summarize, RTmean = mean(RT_io))
ggplot(aggRespSV_o, aes(RespType,RTmean,color = Val)) +
geom_line(aes(group=Val))+
geom_point()+
labs(x="Response Type", y = "ReactionTime")+
ylim(520,620)+
facet_grid(.~Sal)+
theme_classic()
anova_DistResp <- aov(RT_ifo~(RespType*Sal*Val*Dist)+Error(participant|(RespType*Sal*Val*Dist)),data=Exp1agg_fo)
View(Exp1agg_fo)
sum(is.na(Exp1agg_fo))
anova_DistResp <- aov(RT_ifo~(RespType*Sal*Val*Dist)+Error(participant|(RespType*Sal*Val*Dist)),data=Exp1agg_fo)
View(Exp1agg_fo)
sum(is.na(Exp1agg_fo$RT_ifo))
table(Exp1agg_fo$participant)
str(Exp1agg_fo)
table(Exp1agg_fo$Sal)
table(Exp1agg_Resp_o$Sal)
table(Exp1agg_fo$RespType)
table(Exp1agg_fo$Val)
table(Exp1agg_fo$Dist)
which(Exp1agg_fo == 0)
